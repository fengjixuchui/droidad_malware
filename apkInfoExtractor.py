import sys

import networkx as nx
from androguard import *
from androguard.misc import AnalyzeAPK
from matplotlib import pyplot as plt

from LibFeatureList import *
from FeatureList import *
from LiteRadar.literadar import LibRadarLite
# import DroidLog


class appInfo:
    def __init__(self,filename):
        self.mDictActionIdx = List2IdxDict(INTENT_ACTION)
        self.mDictCateIdx = List2IdxDict(INTENT_CATEGORY)
        self.mDictPerIdx = List2IdxDict(PERMISSION_OFFICAL)
        self.mDictAPIIdx = List2IdxDict(APIList)
        self.mVecAction = [0] * len(self.mDictActionIdx)

        self.mVecCate = [0] * len(self.mDictCateIdx)
        self.mVecPer = [0] * len(self.mDictPerIdx)
        self.mVecAPI = [0] * len(self.mDictAPIIdx)
        # 用向量表示权限分类统计信息，长度5是为了和其他的Other一致
        self.mVecPerCat = [0] * 5
        # 活动的数量
        self.mActivitiesNum = -1
        self.mActivitiesWithIntentFilter = 0
        self.mMaxIntentActionNum_Activity = 0
        # 服务的数量
        self.mServiceNum = -1
        self.mServiceNumWithIntentFilter = 0
        self.mMaxIntentActionNum_Service = 0
        # 接收器的数量
        self.mReceiverNum = -1
        self.mReceiverNumWithIntentFilter = 0
        self.mMaxIntentActionNum_Receiver = 0
        # 提供者的数量
        self.mProvider = -1
        # 权限的数量
        self.mPermissionNum = -1

        # 第三方权限数目
        self.mPermissionThirdNum = -1
        # 使用特征的数量
        self.mFeatureNum = -1
        # 目标SDK版本
        self.mTargetSDKVer = -1

        # 向量相关的统计量
        self.mOcuVecAction = 0
        self.mOcuVecCate = 0
        self.mOcuVecPer = 0
        self.mOcuVecAPI = 0
        # sum不计算OTHER的数量
        self.mSumVecAction = 0
        self.mSumVecCate = 0
        self.mSumVecPer = 0
        self.mSumVecAPI = 0

        # 权限统计量
        self.mOcuPerCat = 0
        self.mSumPerCat = 0
        # 公共库名字列表
        self.mCommonLibList = []

        self.mFname = filename
        #self.getCommonLibList()
        self.generatorLibVec()
        self.mApk,self.mDalvik,self.mAnalysis =AnalyzeAPK(self.mFname)

        if not self.mApk.is_valid_APK():
            print("APK: "+self.mFname+" is not a valid apk")
        # 四大组件
        self.mActivitiesNum  = len(self.mApk.get_activities())
        self.mServiceNum  = len(self.mApk.get_services())
        self.mReceiverNum  = len(self.mApk.get_receivers())
        self.mProvider  = len(self.mApk.get_providers())
        #目标SDK版本
        self.mTargetSDKVer = self.mApk.get_effective_target_sdk_version()
        # 特征数目
        self.mFeatureNum = len(self.mApk.get_features())
        # 权限相关
        self.mPermissionNum = len(self.mApk.get_permissions())
        self.mPermissionThirdNum = len(self.mApk.get_requested_third_party_permissions())

        self.detailedPermission = self.mApk.get_requested_aosp_permissions_details()


        self.mVecAction = [0] * len(self.mDictActionIdx)
        self.mVecCate = [0] * len(self.mDictCateIdx)
        self.mVecPer = [0] * len(self.mDictPerIdx)
        for permission in self.detailedPermission:
            #DroidLog.print2PermissionLog(permission)
            index = self.mDictPerIdx.get(permission)
            if index is  None:
                index = self.mDictPerIdx.get('other')
            self.mVecPer[index]=1

            level = self.detailedPermission.get(permission)['protectionLevel']
            if level=='normal':
                self.mVecPerCat[0] +=1
            elif level == 'dangerous':
                self.mVecPerCat[1] += 1
            elif level == 'signature|system':
                self.mVecPerCat[2] += 1
            else:
                self.mVecPerCat[3] +=1
        receiverList = self.mApk.get_receivers()
        if len(receiverList)>0:
            for rec in receiverList:
                intentList = self.mApk.get_intent_filters('receiver',rec)
                tempIntentNum =0
                if len(intentList)>0:
                    self.mReceiverNumWithIntentFilter += 1
                    if intentList.get('action')is not None:
                        for intent in intentList['action']:
                            #DroidLog.print2IntentLog(intent)
                            tempIntentNum+=1
                            index = self.mDictActionIdx.get(intent)
                            if index is None:
                                index = self.mDictActionIdx.get('other')
                            self.mVecAction[int(index)] += 1

                        if tempIntentNum >= self.mMaxIntentActionNum_Receiver:
                            self.mMaxIntentActionNum_Receiver = tempIntentNum
                    if intentList.get('category') is not None:
                        for intent in intentList['category']:
                            #DroidLog.print2IntentLog(intent)
                            index = self.mDictCateIdx.get(intent)
                            if index is None:
                                index = self.mDictCateIdx.get('other')
                            self.mVecAction[int(index)] += 1

        activityList = self.mApk.get_activities()
        if len(activityList)>0:
            for act in activityList:
                intentList = self.mApk.get_intent_filters('activity',act)
                tempIntentNum =0
                if len(intentList) > 0:
                    self.mActivitiesWithIntentFilter +=1
                    if intentList.get('action') is not None:
                        for intent in intentList['action']:
                            #DroidLog.print2IntentLog(intent)
                            tempIntentNum+=1
                            index = self.mDictActionIdx.get(intent)
                            if index is None:
                                index = self.mDictActionIdx.get('other')
                            self.mVecAction[int(index)] += 1
                        if tempIntentNum >= self.mMaxIntentActionNum_Activity:
                            self.mMaxIntentActionNum_Activity = tempIntentNum
                    if intentList.get('category') is not None:
                        for intent in intentList['category']:
                            #DroidLog.print2IntentLog(intent)
                            index = self.mDictCateIdx.get(intent)
                            if index is None:
                                index = self.mDictCateIdx.get('other')
                            self.mVecAction[int(index)] += 1

        serviceList = self.mApk.get_services()
        if len(serviceList)>0:
            for ser in serviceList:
                intentList = self.mApk.get_intent_filters('service',ser)
                tempIntentNum =0
                if len(intentList) > 0:
                    self.mServiceNumWithIntentFilter += 1
                    if intentList.get('action') is not None:
                        for intent in intentList['action']:
                            #DroidLog.print2IntentLog(intent)
                            tempIntentNum+=1
                            index = self.mDictActionIdx.get(intent)
                            if index is None:
                                index = self.mDictActionIdx.get('other')
                            self.mVecAction[int(index)] += 1
                        if tempIntentNum >= self.mMaxIntentActionNum_Service:
                            self.mMaxIntentActionNum_Service = tempIntentNum
                    if intentList.get('category')is not None:
                        for intent in intentList['category']:
                            #DroidLog.print2IntentLog(intent)
                            index = self.mDictCateIdx.get(intent)
                            if index is None:
                                index = self.mDictCateIdx.get('other')
                            self.mVecAction[int(index)] += 1


        self.getMethodInvokeOrigin()

        #统计量相关的计算
        self.mOcuVecAction = self.getVecOcu(self.mVecAction)
        self.mOcuVecCate = self.getVecOcu(self.mVecCate)
        self.mOcuVecPer = self.getVecOcu(self.mVecPer)
        self.mOcuVecAPI = self.getVecOcu(self.mVecAPI)
        self.mSumVecAction = self.getVecSum(self.mVecAction)
        self.mSumVecCate = self.getVecSum(self.mVecCate)
        self.mSumVecPer = self.getVecSum(self.mVecPer)
        self.mSumVecAPI = self.getVecSum(self.mVecAPI)

        self.mOcuPerCat = self.getVecOcu(self.mVecPerCat)
        self.mSumPerCat = self.getVecSum(self.mVecPerCat)

    def getPermissionList(self):
        return self.mApk.get_permissions()

    def getActivitiesList(self):
        return self.mApk.get_activities()

    def getMethodInvokeRemoveLib(self):
        allMethods = self.mDalvik[0].get_methods()
        allClasses = self.mDalvik[0].get_classes_names()
        mothodInvokeList = []
        intentMethodInvoke = []
        classInvokeList = []
        ENTRY_POINT = ['onCreate','onReceive']
        dicMethodInClass={}
        androidSupportStr = 'android/support/v'
        androidGmsStr = "google/android/gms"

        remove_list = []

        for item in allClasses:
            if androidSupportStr in item or androidGmsStr in item:
                remove_list.append(item)

        for item in remove_list:
            allClasses.remove(item)

        for className in allClasses:
            if '$' in className:
                t = className.split('$')
                parentClass = ''
                for i in range (0,len(t)-1):
                    parentClass = parentClass + t[i] + '$'

                parentClass = parentClass[:-1]+';'

                if parentClass in allClasses and '/R$' not in className:
                    classInvokeList.append(className+' --->'+parentClass)

        for m in allMethods:

            invokingMethod = m.get_class_name()+' '+m.get_name()

            className = m.get_class_name()

            methodName = m.get_name()

            if androidSupportStr in className or androidGmsStr in className:
                continue

            if '$' not in className:
                if className not in dicMethodInClass.keys():
                    dicMethodInClass[className] = []
                    dicMethodInClass[className].append(methodName)
                else:
                    dicMethodInClass[className].append(methodName)
            if '$' in className:
                if not methodName in "<init>":
                    try:
                        init_method = className+" "+"<init>"
                    except:
                        print(invokingMethod)

            flag = 0
            flagIntent = 0
            tempClass=[]
            code = m.get_code()
            if code == None:
                continue
            else:
                bc = code.get_bc()
                idx = 0
                lineNum = 1
                for i in bc.get_instructions():
                    line = "%s %s" %(i.get_name(),i.get_output())
                    if line.find("invoke")>=0:
                        try:
                            index = line.index("L")
                            method = str(line[index:]).split("->")
                            className = method[0]
                            methodName = method[1].split("(")[0]
                            # set the descriptor name
                            if className in allClasses:
                                invokedMethod = className + " " + methodName
                                mothodInvokeList.append(invokingMethod + " ---> " + invokedMethod)
                                print(invokingMethod + " ---> " + invokedMethod)
                                classInvokeList.append(m.get_class_name() + " ---> " + className)
                                print(m.get_class_name() + " ---> " + className)

                        except:
                            print ("FAULT Invoke:  {}".format(line))
                    if line.find("sput")>=0 or line.find("iput")>=0:
                        try:
                            method = line.split("->")[-1]
                            className = method.split("->")[0]
                            if className in allClasses:
                                classInvokeList.append(m.get_class_name()+" --->"+className)
                        except:
                            print(line)
                    if line.find("const-class")>=0:
                        flag = 1
                        try:
                            index = line.index("L")
                            className = str(line[index:])
                        except:
                            pass
                        if className in allClasses:
                            tempClass.append(className)

                    if line.find("new-instance")>=0 and line.find("Landroid/content/Intent;")>=0:
                        flagIntent = 1

                    if line.find("startActivity")>=0 or line.find("startService")>=0 or line.find(
                            "sendBroadcast")>=0 and (flag >=0) and (flagIntent>0):
                        try:
                            if len(tempClass)>0:
                                n = len(tempClass)
                                className = tempClass[n-1]
                                tempClass.pop()

                                if className in allClasses:
                                    invokedMethod = className+" "+"onCreate"
                                    intentMethodInvoke.append(invokingMethod+" --->"+invokedMethod)
                                    classInvokeList.append(m.get_class_name()+" --->"+className)
                                    flagIntent = 0
                        except:
                            print(line)

    def getMethodInvokeOrigin(self):
        for item in self.mDalvik:
            allMethods = item.get_methods()
            for m in allMethods:
                invokingMethod = m.get_class_name() + " " + m.get_name()
                code = m.get_code()
                if code!=None:
                    bc = code.get_bc()
                    for i in bc.get_instructions():
                        line = "%s %s" % (i.get_name(), i.get_output())
                        if line.find("invoke-") >= 0:

                            try:
                                # 返回line中“L”的位置
                                index = line.index("L")
                                # method 中保留从L开始的后面的字符串
                                method = str(line[index:])
                                # 将method以"->"拆分
                                method2 = method.split("->")

                                # set the class
                                # 开头的部分是类名
                                className = method2[0]
                                # 另外一部分中用（隔开的是前一部分是方法名
                                methodName = method2[1].split("(")[0]
                                searchStr = "%s %s"%(className,methodName)
                                #DroidLog.print2APILog(searchStr)
                                index = self.mDictAPIIdx.get(searchStr)
                                if index is None:
                                    index = self.mDictCateIdx.get('other')
                                    # print("==========Other API   " + searchStr)
                                self.mVecAPI[int(index)] += 1
                            except:
                                # 出现异常就跳过
                                pass

    def getVecSum(self,vec):
        size = len(vec)
        #去除OTHER
        return sum(vec) - vec[size-1]

    def getVecOcu(self,vec):
        ocu = 0
        #去除OTHER
        size = len(vec)
        for i in range(0,size-1):
            if vec[i]>0:
               ocu+=1
        return ocu

    def outPutVec(self):
        outPutList = []
        outPutList.append(self.mFname)
        outPutList.extend(self.mVecAction)
        outPutList.extend(self.mVecCate)
        outPutList.extend(self.mVecPer)
        outPutList.extend(self.mVecAPI)
        outPutList.extend(self.mVecPerCat)

        outPutList.append(self.mActivitiesNum)
        outPutList.append(self.mActivitiesWithIntentFilter)
        outPutList.append(self.mMaxIntentActionNum_Activity)
        outPutList.append(self.mServiceNum)
        outPutList.append(self.mServiceNumWithIntentFilter)
        outPutList.append(self.mMaxIntentActionNum_Service)
        outPutList.append(self.mReceiverNum)
        outPutList.append(self.mReceiverNumWithIntentFilter)
        outPutList.append(self.mMaxIntentActionNum_Receiver)
        outPutList.append(self.mProvider)
        outPutList.append(self.mPermissionNum)
        outPutList.append(self.mPermissionThirdNum)
        outPutList.append(self.mFeatureNum)
        outPutList.append(self.mTargetSDKVer)

        outPutList.append(self.mOcuVecAction)
        outPutList.append(self.mOcuVecCate)
        outPutList.append(self.mOcuVecPer)
        outPutList.append(self.mOcuVecAPI)
        outPutList.append(self.mSumVecAction)
        outPutList.append(self.mSumVecCate)
        outPutList.append(self.mSumVecPer)
        outPutList.append(self.mSumVecAPI)
        outPutList.append(self.mOcuPerCat)
        outPutList.append(self.mSumPerCat)
        outPutList.extend(self.libVec)
        return outPutList

    def getCommonLibList(self):
        self.mCommonLibList = []
        if self.mFname != None:
            lib = LibRadarLite(self.mFname)
            rec = lib.compare()
            for item in rec:
                #DroidLog.print2LibLog(item.get("Package"))
                self.mCommonLibList.append(item.get("Package"))
        print(self.mCommonLibList)

    def generatorLibVec(self):

        idx = 0
        dictIdx = {}
        for item in LIB_LIST:
            dictIdx[item] = idx
            idx += 1
        dictIdx['OtherLib'] = idx
        idx += 1
        for item in LIB_TYPE_LIST:
            dictIdx[item] = idx
            idx += 1
        dictIdx['Unknown'] = idx



        vecLib = [0] * (len(LIB_LIST) + 1)
        vecType = [0] * (len(LIB_TYPE_LIST) + 1)
        vecTotal = vecLib + vecType

        lib = LibRadarLite(self.mFname)
        tempJson = lib.compare()

        for item in tempJson:
            libName = item.get('Library')
            libType = item.get('Type')
            if libName != None and len(libName) > 0 and dictIdx.get(libName) != None:
                vecTotal[dictIdx.get(libName)] += 1
            else:
                vecTotal[dictIdx.get('OtherLib')] += 1
            if libType != None and len(libType) > 0 and dictIdx.get(libType) != None:
                vecTotal[dictIdx.get(libType)] += 1
            else:
                vecTotal[dictIdx.get('Unknown')] += 1

        tempVec = []

        for item in vecTotal:
            tempVec.append(str(item))
        self.libVec = tempVec





def getHeaderList():
    action_len = len(INTENT_ACTION) + 1
    intent_cato_len = len(INTENT_CATEGORY) + 1
    per_len = len(PERMISSION_OFFICAL) + 1
    api_len = len(APIList) + 1
    per_cato_len = 5
    other_stat = 24
    total_len = action_len + intent_cato_len + per_len + api_len + per_cato_len + other_stat
    listHeader = []
    for idx in range(total_len):
        listHeader.append(getFeatureNameByIndex(idx))
    print(len(listHeader))
    listHeader.extend(getLibHeadLine())
    print(len(listHeader))
    return listHeader


    # def vec2Feature(self,vec):
    #     validFeaList = []
    #
    #     for i in range(len(vec)):
    #         # 一般CSV第一个是名字不管
    #         if vec[i]>0:
    #             validFeaList.append(getFeatureNameByIndex(i))
    #     return validFeaList

