import json
import os

import AdLib
import DroidLog
from FeatureList import List2IdxDict, INTENT_ACTION, INTENT_CATEGORY, PERMISSION_OFFICAL, APIList


def logAnalysis(filePath):
    dictLog = {}
    fileHandler = open(filePath,"r")
    for item in fileHandler.readlines():
        theOne = dictLog.get(item)
        if theOne is None:
            dictLog[item]=1
        else:
            dictLog[item] = theOne+1
    fileHandler.close()
    return dictLog



def filterGC(filePath):
    listValidAPI = []
    fileHandler = open(filePath,"r")
    thirdPartyList=[
        "Lcom/e4a"
    ]
    for item in fileHandler.readlines():
        things = item.replace("\n","").split(" ")
        if len(things[0].split("/")[-1])<=2:
            continue
        if len(things[1])<=2:
            continue
        if things[1]=="<init>":
            continue
        if things[1] == "valueOf":
            continue
        if things[0] == "Ljava/util/Iterator":
            continue
        if things[0].__contains__("umeng"):
            continue
        if things[0].__contains__("Lcom/google/android/gms"):
            continue
        if things[0].__contains__("Landroid/support/"):
            continue
        if things[0].__contains__("tencent"):
            continue
        if things[0].__contains__("opengl"):
            continue
        if things[0].__contains__("Lcom/e4a"):
            continue

        if things[0].__contains__("Lcom/e4a"):
            continue

        if things[0].__contains__("sogou"):
            continue


        if things[0].__contains__("youku"):
            continue

        if things[0].__contains__("baidu"):
            continue
        needSkip = False
        for mono in AdLib.AdLibs:
            if item.__contains__(mono):
                needSkip = True
                break;
        if needSkip:
            print("item:"+item)
            print("mono:"+mono)
            continue

        listValidAPI.append(item)
    fileHandler.close()
    return listValidAPI

def getFeatureNameByIndex(idx):
        offsetmVecAction = len(INTENT_ACTION)
        offsetmVecCate = len(INTENT_CATEGORY) + offsetmVecAction + 1
        offsetmVecPer = len(PERMISSION_OFFICAL) + offsetmVecCate + 1
        offsetmVecAPI = len(APIList) + offsetmVecPer + 1
        offsetmVecPerCat = 5 + offsetmVecAPI

        if idx < offsetmVecAction:
            return INTENT_ACTION[idx]
        elif idx == offsetmVecAction:
            return "INTENT_ACTION_OTHER"
        elif idx < offsetmVecCate:
            return INTENT_CATEGORY[idx-offsetmVecAction-1]
        elif idx == offsetmVecCate:
            return "INTENT_CATEGORY_OTHER"
        elif idx < offsetmVecPer:
            return PERMISSION_OFFICAL[idx-offsetmVecCate-1]
        elif idx == offsetmVecPer:
            return "PERMISSION_OTHER"
        elif idx < offsetmVecAPI:
            return APIList[idx-offsetmVecPer-1]
        elif idx == offsetmVecAPI:
            return "API_OTHER"
        elif idx == offsetmVecAPI+1:
            return "PERMISSION_CATO_NORMAL"
        elif idx == offsetmVecAPI+2:
            return "PERMISSION_CATO_DANGER"
        elif idx == offsetmVecAPI+3:
            return "PERMISSION_CATO_SIG_SYS"
        elif idx == offsetmVecAPI+4:
            return "PERMISSION_CATO_SIG"
        elif idx == offsetmVecPerCat:
            return "PERMISSION_CATO_OTHER"
        elif idx == offsetmVecPerCat + 1:
            return "mActivitiesNum"
        elif idx == offsetmVecPerCat + 2:
            return "mActivitiesWithIntentFilter"
        elif idx == offsetmVecPerCat + 3:
            return "mMaxIntentActionNum_Activity"
        elif idx == offsetmVecPerCat + 4:
            return "mServiceNum"
        elif idx == offsetmVecPerCat + 5:
            return "mServiceNumWithIntentFilter"
        elif idx == offsetmVecPerCat + 6:
            return "mMaxIntentActionNum_Service"
        elif idx == offsetmVecPerCat + 7:
            return "mReceiverNum"
        elif idx == offsetmVecPerCat + 8:
            return "mReceiverNumWithIntentFilter"
        elif idx == offsetmVecPerCat + 9:
            return "mMaxIntentActionNum_Receiver"
        elif idx == offsetmVecPerCat + 10:
            return "mProvider"
        elif idx == offsetmVecPerCat + 11:
            return "mPermissionNum"
        elif idx == offsetmVecPerCat + 12:
            return "mPermissionThirdNum"
        elif idx == offsetmVecPerCat + 13:
            return "mFeatureNum"
        elif idx == offsetmVecPerCat + 14:
            return "mTargetSDKVer"
        elif idx == offsetmVecPerCat + 15:
            return "mOcuVecAction"
        elif idx == offsetmVecPerCat + 16:
            return "mOcuVecCate"
        elif idx == offsetmVecPerCat + 17:
            return "mOcuVecPer"
        elif idx == offsetmVecPerCat + 18:
            return "mOcuVecAPI"
        elif idx == offsetmVecPerCat + 19:
            return "mSumVecAction"
        elif idx == offsetmVecPerCat + 20:
            return "mSumVecCate"
        elif idx == offsetmVecPerCat + 21:
            return "mSumVecPer"
        elif idx == offsetmVecPerCat + 22:
            return "mSumVecAPI"
        elif idx == offsetmVecPerCat + 23:
            return "mOcuPerCat"
        elif idx == offsetmVecPerCat + 24:
            return "mSumPerCat"
        return "ERROR_FEATURE"

# def getHeaderList():
#     action_len = len(INTENT_ACTION)+1
#     intent_cato_len = len(INTENT_CATEGORY)+1
#     per_len = len(PERMISSION_OFFICAL)+1
#     api_len = len(APIList)+1
#     per_cato_len  = 5
#     other_stat = 24
#     total_len = action_len+intent_cato_len+per_len+api_len+per_cato_len+other_stat
#     listHeader = []
#     for idx in range(total_len):
#         listHeader.append(getFeatureNameByIndex(idx))
#     return ['filename']+listHeader



def getScoreFile(path):
    outputList=[]
    scoreHandler = open(path)
    lines = scoreHandler.readlines()
    scoreHandler.close()
    for line in lines:
        line = line.strip('\n').split(',')
        if len(line)>1:
            indexPart = line[0]
            index = line[0].split(':')[1]
            scorePart = line[1]
            # outputList.append(getFeatureNameByIndex(int(index)))
            outputList.append(int(index))
            # print(getFeatureNameByIndex(int(index)))
    return outputList


T1 = 0.2
if __name__ == "__main__":
    # OutPutList=[]
    # logList = [
    #     "logs/API_LOG/API_Benign_2021_07_21",
    #            "logs/API_LOG/API_VS2017_Adware_2021_07_20",
    #            "logs/API_LOG/API_VS2018_Adware_2021_07_24",
    #            "logs/API_LOG/API_VS2019_Adware_2021_07_24"
    #            ]
    # logSize  =[2089,2647,1819,9478]
    # for idx in range(len(logList)):
    #     print(logList[idx])
    #     dictLog = logAnalysis(logList[idx])
    #     for item in sorted(dictLog.items(),key=lambda x:x[1],reverse=True):
    #         if int(item[1])/logSize[idx]>=T1:
    #             OutPutList.append(item[0])
    #
    # fp = open("logs/newApi.txt","w")
    # fp.writelines(OutPutList)
    # fp.close()
    # thelist = filterGC("logs/newApi.txt")
    # fp = open("logs/newApiv2.txt","w")
    # fp.writelines(thelist)
    # fp.close()
    # rec1 = getScoreFile("logs/chi2_norm_150.txt")
    # rec2 = getScoreFile("logs/f_classif_norm_150.txt")
    # rec3 = getScoreFile("logs/mutual_info_classif_norm_150.txt")
    # finalList = []
    # finalList.extend(rec1)
    # finalList.extend(rec2)
    # finalList.extend(rec2)
    # print(str(len(finalList)))
    # weightDict = {}
    # for item in finalList:
    #     temp = weightDict.get(item)
    #     if temp!=None:
    #         weightDict[item]+=1
    #     else:
    #         weightDict[item]=1
    #
    # for item in weightDict.keys():
    #     print("Key:"+str(item)+", value: "+str(weightDict.get(item)))
    # print(str(len(weightDict)))

    # getHeaderList()

    # 分析日志提取其中高于阈值的特征

    with open("LIB_sample5000_2018_2022_03_01","r") as f:
        theDict =json.load(f)

    for item in theDict.keys():
        print("\""+item+"\",")
